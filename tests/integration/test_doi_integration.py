from tests.integration.utils.assertions import (
    assert_status_code,
    assert_response_matches_dict,
    assert_response_contains_fields,
    assert_json_response,
)


class TestDOICreation:
    """Integration tests for DOI creation workflow."""

    def test_create_manual_doi_success_201(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test creating a MANUAL DOI successfully returns 201 and triggers snapshot publication."""
        # Arrange - Create dataset with version
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Act - Create MANUAL DOI
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/MANUAL{unique_id}",
            "mode": "MANUAL",
        }

        response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 200)
        data = assert_json_response(response)
        assert_response_contains_fields(response, {
            "identifier": f"10.82978/MANUAL{unique_id}",
            "state": "DRAFT",
            "mode": "MANUAL",
        })
        assert data["identifier"] == f"10.82978/MANUAL{unique_id}"

        # Verify snapshot was published (dataset should be accessible via snapshot endpoint)
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 200)

    def test_create_auto_doi_success_201(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test creating an AUTO DOI successfully returns 201 but does NOT trigger snapshot publication."""
        # Arrange - Create dataset with version
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Act - Create AUTO DOI (no identifier - auto-generated by service)
        doi_data = {
            "mode": "AUTO",
        }

        response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 200)
        assert_json_response(response)
        assert_response_contains_fields(response, {
            "state": "DRAFT",
            "mode": "AUTO",
        })
        # Verify identifier is present (auto-generated)
        data = assert_json_response(response)
        assert "identifier" in data
        assert data["identifier"] is not None

        # Verify snapshot was NOT published (dataset should not be accessible via snapshot endpoint)
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 404)

    def test_create_doi_invalid_data_422(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test creating DOI with invalid data returns 422."""
        # Arrange
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Act - Invalid DOI data
        invalid_doi_data = {
            "identifier": "",  # Empty identifier
            "mode": "INVALID_MODE",  # Invalid mode
        }

        response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=invalid_doi_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 422)
        assert_json_response(response)

    def test_create_doi_nonexistent_dataset_404(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test creating DOI for non-existent dataset returns 404."""
        # Arrange
        nonexistent_id = dataset_fixture.get_nonexistent_dataset_id()
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/NONEXISTENT{unique_id}",
            "mode": "MANUAL",
        }

        # Act
        response = http_client.post(
            f"/datasets/{nonexistent_id}/versions/v1.0/doi",
            json=doi_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 404)

    def test_create_doi_nonexistent_version_404(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test creating DOI for non-existent version returns 404."""
        # Arrange
        dataset = dataset_fixture.create_test_dataset()
        dataset_id = dataset["id"]
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/NONEXISTENTVERSION{unique_id}",
            "mode": "MANUAL",
        }

        # Act
        response = http_client.post(
            f"/datasets/{dataset_id}/versions/nonexistent-version/doi",
            json=doi_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 404)

    def test_create_duplicate_doi_400(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test creating duplicate DOI returns 409 conflict."""
        # Arrange - Create dataset with version and first DOI
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Create first DOI
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/DUPLICATE{unique_id}",
            "mode": "MANUAL",
        }

        first_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(first_response, 200)

        # Act - Try to create duplicate DOI
        duplicate_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(duplicate_response, 400)
        data = assert_json_response(duplicate_response)
        assert "already_exists" in str(data)

    def test_create_doi_unauthorized_401(self, http_client, dataset_fixture):
        """Test creating DOI without authentication returns 401."""
        # Arrange
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/INVALIDMODE{unique_id}",
            "mode": "MANUAL",
        }

        # Act
        response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
        )  # No headers

        # Assert
        assert_status_code(response, 401)
        assert_response_matches_dict(response, {"detail": "Unauthorized"})


class TestDOIStateChanges:
    """Integration tests for DOI state change workflow."""

    def test_change_doi_state_to_findable_triggers_snapshot(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test changing DOI state to FINDABLE triggers snapshot publication."""
        # Arrange - Create dataset with AUTO DOI
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Create AUTO DOI (should not trigger snapshot, no identifier - auto-generated by service)
        doi_data = {
            "mode": "AUTO",
        }

        create_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(create_response, 200)

        # Verify snapshot is not available yet
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 404)

        # Act - Change DOI state to FINDABLE
        state_change_data = {"state": "FINDABLE"}

        response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 200)
        assert_json_response(response)
        assert_response_contains_fields(response, {"new_state": "FINDABLE"})

        # Verify snapshot was published after state change
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 200)

    def test_change_doi_state_to_registered_no_snapshot(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test changing DOI state to REGISTERED does not trigger snapshot publication."""
        # Arrange - Create dataset with AUTO DOI
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Create AUTO DOI (no identifier - auto-generated by service)
        doi_data = {
            "mode": "AUTO",
        }

        create_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(create_response, 200)

        # Act - Change DOI state to REGISTERED
        state_change_data = {"state": "REGISTERED"}

        response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 200)
        assert_json_response(response)
        assert_response_contains_fields(response, {"new_state": "REGISTERED"})

        # Verify snapshot was NOT published
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 404)

    def test_change_doi_state_invalid_transition_400(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test changing DOI state with invalid transition returns 400."""
        # Arrange - Create dataset with DOI
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Create DOI
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/INVALIDTRANSITION{unique_id}",
            "mode": "MANUAL",
        }

        create_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(create_response, 200)

        # Act - Try invalid state change (DRAFT to DRAFT)
        state_change_data = {"state": "DRAFT"}

        response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
            headers=valid_headers,
        )

        # Assert - Should return 400 or handle gracefully
        # Note: The actual behavior depends on DOI service implementation
        assert response.status_code in [200, 400, 422]

    def test_change_doi_state_nonexistent_doi_404(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test changing DOI state for non-existent DOI returns 404."""
        # Arrange
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        state_change_data = {"state": "FINDABLE"}

        # Act
        response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 404)

    def test_change_doi_state_unauthorized_401(
        self, http_client, dataset_fixture
    ):
        """Test changing DOI state without authentication returns 401."""
        # Arrange
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        state_change_data = {"state": "FINDABLE"}

        # Act
        response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
        )  # No headers

        # Assert
        assert_status_code(response, 401)
        assert_response_matches_dict(response, {"detail": "Unauthorized"})


class TestDOIRetrieval:
    """Integration tests for DOI retrieval workflow."""

    def test_get_doi_success_200(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test getting DOI for existing dataset version returns 200."""
        # Arrange - Create dataset with DOI
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Enable and publish the version first
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # Create DOI
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/GET{unique_id}",
            "mode": "MANUAL",
        }

        create_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(create_response, 200)

        # Act - Get DOI
        response = http_client.get(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 200)
        assert_json_response(response)
        assert_response_contains_fields(response, {
            "state": "DRAFT",
            "mode": "MANUAL",
        })
        # Verify identifier is present
        data = assert_json_response(response)
        assert "identifier" in data
        assert data["identifier"] is not None
        assert data["identifier"] == doi_data["identifier"]

    def test_get_doi_nonexistent_dataset_404(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test getting DOI for non-existent dataset returns 404."""
        # Arrange
        nonexistent_id = dataset_fixture.get_nonexistent_dataset_id()

        # Act
        response = http_client.get(
            f"/datasets/{nonexistent_id}/versions/v1.0/doi",
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 404)

    def test_get_doi_nonexistent_version_404(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test getting DOI for non-existent version returns 404."""
        # Arrange
        dataset = dataset_fixture.create_test_dataset()
        dataset_id = dataset["id"]

        # Act
        response = http_client.get(
            f"/datasets/{dataset_id}/versions/nonexistent-version/doi",
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 404)

    def test_get_doi_nonexistent_doi_404(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test getting DOI for version without DOI returns 404."""
        # Arrange
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Act
        response = http_client.get(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            headers=valid_headers,
        )

        # Assert
        assert_status_code(response, 404)

    def test_get_doi_unauthorized_401(self, http_client, dataset_fixture):
        """Test getting DOI without authentication returns 401."""
        # Arrange
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # Act
        response = http_client.get(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
        )  # No headers

        # Assert
        assert_status_code(response, 401)
        assert_response_matches_dict(response, {"detail": "Unauthorized"})


class TestDOIWorkflowIntegration:
    """Integration tests for complete DOI workflow."""

    def test_complete_doi_workflow_manual_mode(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test complete DOI workflow with MANUAL mode."""
        # 1. Create dataset with version
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # 2. Enable and publish version
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # 3. Create MANUAL DOI (should trigger snapshot)
        import uuid
        unique_id = str(uuid.uuid4())[:8]
        doi_data = {
            "identifier": f"10.82978/WORKFLOW{unique_id}",
            "mode": "MANUAL",
        }

        create_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(create_response, 200)

        # 4. Verify snapshot was published
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 200)

        # 5. Get DOI to verify it was created
        get_response = http_client.get(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            headers=valid_headers,
        )
        assert_status_code(get_response, 200)
        doi_info = assert_json_response(get_response)
        # Verify DOI identifier is present
        assert "identifier" in doi_info
        assert doi_info["identifier"] is not None
        assert doi_info["state"] == "DRAFT"
        assert doi_info["identifier"] == doi_data["identifier"]

        # 6. Try to change MANUAL DOI state (should fail - MANUAL DOIs cannot change state)
        state_change_data = {"state": "FINDABLE"}

        state_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
            headers=valid_headers,
        )
        assert_status_code(state_response, 400)  # Should fail for MANUAL DOIs

        # 7. Verify snapshot is still accessible
        final_snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(final_snapshot_response, 200)

    def test_complete_doi_workflow_auto_mode(
        self, http_client, valid_headers, dataset_fixture
    ):
        """Test complete DOI workflow with AUTO mode."""
        # 1. Create dataset with version
        dataset = dataset_fixture.create_dataset_with_version()
        dataset_id = dataset["id"]
        current_version = dataset["current_version"]
        version_name = current_version["name"]

        # 2. Enable and publish version
        enable_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/enable",
            headers=valid_headers,
        )
        assert_status_code(enable_response, 200)

        publish_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/publish",
            headers=valid_headers,
        )
        assert_status_code(publish_response, 200)

        # 3. Create AUTO DOI (should NOT trigger snapshot, no identifier - auto-generated by service)
        doi_data = {
            "mode": "AUTO",
        }

        create_response = http_client.post(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=doi_data,
            headers=valid_headers,
        )
        assert_status_code(create_response, 200)

        # 4. Verify snapshot was NOT published initially
        snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(snapshot_response, 404)

        # 5. Change DOI state to FINDABLE (should trigger snapshot publication)
        state_change_data = {"state": "FINDABLE"}

        state_response = http_client.put(
            f"/datasets/{dataset_id}/versions/{version_name}/doi",
            json=state_change_data,
            headers=valid_headers,
        )
        assert_status_code(state_response, 200)

        # 6. Verify snapshot is now accessible
        final_snapshot_response = http_client.get(f"/datasets/{dataset_id}/snapshot")
        assert_status_code(final_snapshot_response, 200)
